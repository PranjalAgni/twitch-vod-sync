{"version":3,"sources":["utils.ts","components/Timeline/Timeline.tsx","components/VideoPicker/VideoPicker.tsx","components/Viewer/Viewer.tsx","components/VodSyncApp/VodSyncApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["npad","num","size","s","length","formatDate","d","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","parseDuration","m","match","Number","Error","color","id","Timeline","props","videos","className","Array","from","entries","sort","a","b","startDate","Date","Math","min","map","getTime","endDate","max","v","duration","e","tsRef","React","createRef","lineHeight","lines","idx","info","key","height","y","x","width","style","fill","position","undefined","currentPosition","type","value","playing","onClick","onPlayingStateChange","preventDefault","onViewersChange","ref","evt","current","bounds","getBoundingClientRect","ratio","clientX","onSeek","VideoPicker","inputRef","handleSubmit","bind","this","video","console","log","onVideoPicked","error","onSubmit","name","placeholder","PureComponent","Viewer","player","delayRef","startTimer","state","initialState","handleVideoPicked","handleDelayChange","reset","startedPlaying","delay","prevProps","prevState","window","clearTimeout","videoDate","videoDuration","pause","seek","play","offset","setTimeout","setState","fetch","headers","clientId","Authorization","accessToken","response","status","json","videoInfo","data","created_at","setVideoInfo","Twitch","Player","autoplay","addEventListener","PLAYING","setPlayerReady","isNaN","defaultValue","VodSyncApp","interval","containerRef","handlePlayerStateChange","handleSeek","changeViewers","changePlaying","resized","location","hash","viewers","playerState","Map","innerWidth","setInterval","computeCurrentPosition","clearInterval","removeEventListener","totalW","totalH","innerHeight","bestSquareDiag","bestRows","rows","wt","ceil","ht","w","h","squareDiag","set","delete","videosArray","values","start","end","minOffset","maxOffset","videosBuffering","Set","keys","change","forEach","href","i","push","handlePlayerReady","onChange","App","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ef10fdaf.chunk.js","sourcesContent":["function npad(num: number, size: number): string {\n  let s = '' + num;\n  while (s.length < size) {\n    s = '0' + s;\n  }\n  return s;\n}\n\nexport function formatDate(d: Date): string {\n  return (\n    d.getFullYear() +\n    '-' +\n    npad(d.getMonth() + 1, 2) +\n    '-' +\n    npad(d.getDate(), 2) +\n    ' ' +\n    npad(d.getHours(), 2) +\n    ':' +\n    npad(d.getMinutes(), 2) +\n    ':' +\n    npad(d.getSeconds(), 2)\n  );\n}\n\nexport function parseDuration(s: string): number {\n  const m = s.match(/(?:([0-9]+)h)?([0-9]+)m([0-9]+)s/);\n  if (!m) {\n    throw Error('Invalid duration');\n  } else if (m[1]) {\n    return Number(m[1]) * 3600 + Number(m[2]) * 60 + Number(m[3]);\n  } else {\n    return Number(m[2]) * 60 + Number(m[3]);\n  }\n}\n","import React from 'react';\nimport { formatDate } from '../../utils';\nimport { VideoInfo } from '../../types';\nimport './Timeline.css';\n\ninterface TimelineProps {\n  videos: Map<number, VideoInfo>;\n  currentPosition?: Date;\n  playing: boolean;\n  onSeek: (position: Date) => void;\n  onViewersChange: (change: 1 | -1) => void;\n  onPlayingStateChange: (playing: boolean) => void;\n}\n\nfunction color(id: number) {\n  if (id === 0) {\n    return '#aaf';\n  } else if (id === 1) {\n    return '#faa';\n  } else if (id === 2) {\n    return '#afa';\n  } else if (id === 3) {\n    return '#aff';\n  } else if (id === 4) {\n    return '#faf';\n  } else {\n    return '#ffa';\n  }\n}\n\nexport function Timeline(props: TimelineProps) {\n  if (props.videos.size === 0) {\n    return <div className=\"timestamps\"></div>;\n  }\n  const videos = Array.from(props.videos.entries());\n  videos.sort((a, b) => a[0] - b[0]);\n  const startDate = new Date(\n    Math.min(...videos.map(([i, v]) => v.startDate.getTime()))\n  );\n  const endDate = new Date(\n    Math.max(\n      ...videos.map(([i, v]) => v.startDate.getTime() + v.duration * 1000)\n    )\n  );\n\n  const s = startDate.getTime(),\n    e = endDate.getTime();\n\n  const tsRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  function handleClick(evt: React.MouseEvent) {\n    if (!tsRef.current) {\n      return;\n    }\n    const bounds = tsRef.current.getBoundingClientRect();\n    const ratio = (evt.clientX - bounds.x) / bounds.width;\n    props.onSeek(new Date(s + (e - s) * ratio));\n  }\n\n  function handlePlayPause() {\n    props.onPlayingStateChange(!props.playing);\n  }\n\n  const lineHeight = 100.0 / videos.length;\n\n  const lines = videos.map(([id, info], idx) => (\n    <rect\n      key={id}\n      height={lineHeight + '%'}\n      y={lineHeight * idx + '%'}\n      x={((info.startDate.getTime() - s) / (e - s)) * 100.0 + '%'}\n      width={(info.duration / (e - s)) * 1000.0 * 100.0 + '%'}\n      style={{ fill: color(id) }}\n    />\n  ));\n\n  let position = undefined;\n  if (props.currentPosition) {\n    position = (\n      <rect\n        height={'100%'}\n        width={'2px'}\n        x={((props.currentPosition.getTime() - s) / (e - s)) * 100.0 + '%'}\n        style={{ fill: 'black' }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"buttons\">\n        <input\n          type=\"button\"\n          value={props.playing ? 'pause' : 'play'}\n          onClick={handlePlayPause}\n        />\n        <input\n          type=\"button\"\n          value=\"-\"\n          onClick={e => {\n            e.preventDefault();\n            props.onViewersChange(-1);\n          }}\n        />\n        <input\n          type=\"button\"\n          value=\"+\"\n          onClick={e => {\n            e.preventDefault();\n            props.onViewersChange(1);\n          }}\n        />\n      </div>\n      <div className=\"timestamps\" ref={tsRef} onClick={handleClick}>\n        <svg>\n          {lines}\n          {position}\n        </svg>\n        <div>\n          <div>{formatDate(startDate)}</div>\n          <div>\n            {props.currentPosition\n              ? formatDate(props.currentPosition)\n              : undefined}\n          </div>\n          <div>{formatDate(endDate)}</div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\ninterface VideoPickerProps {\n  onVideoPicked: (video: number) => void;\n}\n\nexport class VideoPicker extends React.PureComponent<VideoPickerProps> {\n  inputRef: React.RefObject<HTMLInputElement>;\n\n  constructor(props: VideoPickerProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.inputRef = React.createRef();\n  }\n\n  handleSubmit(evt: React.FormEvent<HTMLFormElement>) {\n    evt.preventDefault();\n    if (this.inputRef.current) {\n      const value = this.inputRef.current.value;\n      const m = value.match(\n        /^(?:https?:\\/\\/(?:www\\.|m\\.)?twitch\\.tv\\/videos\\/)?([0-9]+)(?:\\?.*)?$/\n      );\n      if (m) {\n        const video = Number(m[1]);\n        console.log('Picked video: ', value, ' ', video);\n        this.props.onVideoPicked(video);\n      } else {\n        console.log('Wrong URL: ', value);\n      }\n    } else {\n      console.error('No inputRef');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"picker\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"video\"\n            ref={this.inputRef}\n            placeholder=\"Twitch video URL\"\n          />\n          <input type=\"submit\" value=\"Watch\" />\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { VideoInfo, PlayerState } from '../../types';\nimport { parseDuration } from '../../utils';\nimport { VideoPicker } from '../VideoPicker/VideoPicker';\nimport './Viewer.css';\n\ninterface ViewerProps {\n  id: number;\n  clientId: string;\n  accessToken: string;\n  state?: PlayerState;\n  setVideoInfo: (id: number, info: VideoInfo | undefined) => void;\n  setPlayerReady: () => void;\n  onChange: (id: number, playerState: PlayerState) => void;\n  width: number;\n}\n\ninterface ViewerState {\n  delay: number;\n  video?: number;\n  videoDate?: Date;\n  videoDuration?: number;\n}\n\nexport class Viewer extends React.PureComponent<ViewerProps, ViewerState> {\n  player?: Twitch.Player;\n  delayRef?: React.RefObject<HTMLInputElement>;\n  startTimer?: number;\n\n  constructor(props: ViewerProps) {\n    super(props);\n    this.state = this.initialState();\n    this.player = undefined;\n    this.delayRef = React.createRef();\n    this.handleVideoPicked = this.handleVideoPicked.bind(this);\n    this.handleDelayChange = this.handleDelayChange.bind(this);\n    this.reset = this.reset.bind(this);\n    this.startedPlaying = this.startedPlaying.bind(this);\n  }\n\n  initialState() {\n    return {\n      delay: 0,\n    };\n  }\n\n  componentDidUpdate(prevProps: ViewerProps, prevState: ViewerState) {\n    // Clear previous timer\n    if (this.startTimer !== undefined) {\n      window.clearTimeout(this.startTimer);\n    }\n    this.startTimer = undefined;\n\n    if (\n      this.props.state &&\n      (this.props.state !== prevProps.state ||\n        this.state.delay !== prevState.delay) &&\n      this.player &&\n      this.state.videoDate &&\n      this.state.videoDuration\n    ) {\n      if (this.props.state.state === 'paused') {\n        this.player.pause();\n        this.player.seek(\n          (this.props.state.position.getTime() -\n            this.state.videoDate.getTime()) /\n            1000.0 +\n            this.state.delay\n        );\n      } else if (this.props.state.state === 'buffering') {\n        this.player.seek(\n          (this.props.state.position.getTime() -\n            this.state.videoDate.getTime()) /\n            1000.0 +\n            this.state.delay\n        );\n        this.player.play();\n      } else if (this.props.state.state === 'playing') {\n        const seek =\n          new Date().getTime() / 1000.0 +\n          this.props.state.offset -\n          this.state.videoDate.getTime() / 1000.0 +\n          this.state.delay;\n        if (seek > this.state.videoDuration) {\n          // After the end - stop playback\n          this.player.pause();\n        } else if (seek < 0.0) {\n          // Before the beginning - stop and set timer to start later\n          this.player.seek(0);\n          this.player.pause();\n          this.startTimer = window.setTimeout(() => {\n            if (this.player) {\n              this.player.seek(0);\n              this.player.play();\n            }\n          }, -seek * 1000);\n        } else {\n          // In range - seek\n          this.player.seek(seek);\n          this.player.play();\n        }\n      }\n    }\n  }\n\n  async handleVideoPicked(video: number) {\n    this.setState({ video });\n\n    // Get video information from API\n    const response = await fetch(\n      'https://api.twitch.tv/helix/videos?id=' + video,\n      {\n        headers: {\n          'Client-ID': this.props.clientId,\n          Authorization: 'Bearer ' + this.props.accessToken,\n        },\n      }\n    );\n    if (response.status === 200) {\n      const json = await response.json();\n      const videoInfo = json.data[0];\n      console.log('Got video date: ', videoInfo.created_at);\n      const videoDate = new Date(videoInfo.created_at);\n      const videoDuration = parseDuration(videoInfo.duration);\n      this.setState({\n        videoDate,\n        videoDuration,\n      });\n      this.props.setVideoInfo(this.props.id, {\n        startDate: videoDate,\n        duration: videoDuration,\n      });\n    }\n\n    // Create player\n    this.player = new Twitch.Player('player' + this.props.id, {\n      width: '100%',\n      height: '100%',\n      video,\n      autoplay: false,\n    });\n    this.player.addEventListener(Twitch.Player.PLAYING, this.startedPlaying);\n    console.log('Created player', this.player);\n  }\n\n  startedPlaying() {\n    if (this.player && this.props.state?.state === 'buffering') {\n      // Pause for now, wait for all videos to be ready\n      this.player.pause();\n      this.props.setPlayerReady();\n    }\n  }\n\n  handleDelayChange(evt: React.FormEvent) {\n    evt.preventDefault();\n    if (this.delayRef?.current) {\n      let delay = Number(this.delayRef.current.value);\n      if (isNaN(delay)) {\n        delay = 0;\n      }\n      this.setState({ delay });\n      this.delayRef.current.value = '' + delay;\n    }\n  }\n\n  reset() {\n    this.setState({\n      delay: 0,\n      video: undefined,\n      videoDate: undefined,\n      videoDuration: undefined,\n    });\n    this.props.setVideoInfo(this.props.id, undefined);\n  }\n\n  render() {\n    if (this.state.video) {\n      return (\n        <div\n          className=\"viewer\"\n          style={{\n            width: this.props.width + 'px',\n          }}\n        >\n          <div id={'player' + this.props.id} className=\"player\"></div>\n          <div className=\"options\">\n            <form onSubmit={this.handleDelayChange}>\n              Delay:{' '}\n              <input\n                type=\"text\"\n                name=\"delay\"\n                ref={this.delayRef}\n                defaultValue={this.state.delay}\n              />{' '}\n              <input type=\"submit\" value=\"Set\" />\n            </form>\n            <input type=\"button\" onClick={this.reset} value=\"Reset\" />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"viewer\"\n          style={{\n            width: this.props.width + 'px',\n          }}\n        >\n          <VideoPicker onVideoPicked={this.handleVideoPicked} />\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport './VodSyncApp.css';\nimport { VideoInfo, PlayerState } from '../../types';\nimport { Timeline } from '../Timeline/Timeline';\nimport { Viewer } from '../Viewer/Viewer';\n\nconst TWITCH_CLIENT_ID = 'r69vc9claq1m3n960hrkuszot4nx54';\n\n// Assumed aspect ratio\nconst ASPECT_RATIO = 16.0 / 9.0;\n\nconst MAX_VIEWERS = 6;\n\ninterface VodSyncAppProps {}\n\ninterface VodSyncAppState {\n  accessToken: string | null;\n  viewers: number;\n  playerState: PlayerState;\n  currentPosition?: Date;\n  videos: Map<number, VideoInfo>;\n  width: number;\n}\n\nexport class VodSyncApp extends React.PureComponent<\n  VodSyncAppProps,\n  VodSyncAppState\n> {\n  interval?: number;\n  containerRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: VodSyncAppProps) {\n    super(props);\n    this.state = this.initialState();\n    this.containerRef = React.createRef();\n    this.setVideoInfo = this.setVideoInfo.bind(this);\n    this.handlePlayerStateChange = this.handlePlayerStateChange.bind(this);\n    this.handleSeek = this.handleSeek.bind(this);\n    this.changeViewers = this.changeViewers.bind(this);\n    this.changePlaying = this.changePlaying.bind(this);\n    this.resized = this.resized.bind(this);\n    window.addEventListener('resize', this.resized);\n  }\n\n  initialState(): VodSyncAppState {\n    const match = window.location.hash.match(/#access_token=([^&]+)/);\n    let accessToken = null;\n    if (match && match[1]) {\n      accessToken = match[1];\n      console.log('Got access token: ', accessToken);\n    }\n    return {\n      accessToken,\n      viewers: 2,\n      playerState: {\n        state: 'paused',\n        position: new Date(1),\n      },\n      videos: new Map(),\n      width: window.innerWidth / 2 - 14,\n    };\n  }\n\n  componentDidMount() {\n    this.resized();\n    this.interval = window.setInterval(\n      this.computeCurrentPosition.bind(this),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    if (this.interval !== undefined) {\n      window.clearInterval(this.interval);\n      this.interval = undefined;\n    }\n    window.removeEventListener('resize', this.resized);\n  }\n\n  resized() {\n    this.setState(state => {\n      // Measure the space we have to fill\n      let totalW = window.innerWidth;\n      let totalH = window.innerHeight - 20;\n      if (this.containerRef.current) {\n        const size = this.containerRef.current.getBoundingClientRect();\n        totalW = size.width;\n        totalH = size.height;\n      }\n      // Find the number of rows to use\n      // We pick the one with the best diagonal for videos\n      let bestSquareDiag = 0.0;\n      let bestRows = 1;\n      for (let rows = 1; rows <= state.viewers; ++rows) {\n        const cols = Math.ceil(state.viewers / rows);\n        // Size of the area for each viewer, if we get this number of rows\n        const wt = totalW / cols - 14;\n        const ht = totalH / rows - 6 - 33;\n        // Size of this area with the right aspect ratio\n        const w = Math.min(wt, ht * ASPECT_RATIO);\n        const h = Math.min(ht, wt / ASPECT_RATIO);\n        // Compute the diagonal and update the best value\n        const squareDiag = w * w + h * h;\n        if (squareDiag > bestSquareDiag) {\n          bestSquareDiag = squareDiag;\n          bestRows = rows;\n        }\n      }\n      const columns = Math.ceil(state.viewers / bestRows);\n      return {\n        width: totalW / columns - 14,\n      };\n    });\n  }\n\n  setVideoInfo(id: number, info: VideoInfo | undefined) {\n    console.log('setVideoInfo: ', id, ', ', info);\n    this.setState(state => {\n      const videos = new Map(state.videos);\n      if (info) {\n        videos.set(id, info);\n      } else {\n        videos.delete(id);\n      }\n\n      // Update the player state to fall within at least one video\n      let playerState = state.playerState;\n      if (state.videos.size > 0) {\n        const videosArray = Array.from(state.videos.values());\n        const start = Math.min(...videosArray.map(v => v.startDate.getTime()));\n        const end = Math.max(\n          ...videosArray.map(v => v.startDate.getTime() + v.duration * 1000)\n        );\n        if (this.state.playerState.state === 'paused') {\n          if (this.state.playerState.position.getTime() < start) {\n            playerState = {\n              state: 'paused',\n              position: new Date(start),\n            };\n          } else if (this.state.playerState.position.getTime() > end) {\n            playerState = {\n              state: 'paused',\n              position: new Date(end),\n            };\n          }\n        } else if (this.state.playerState.state === 'playing') {\n          const minOffset = (start - new Date().getTime()) / 1000.0;\n          const maxOffset = (end - new Date().getTime()) / 1000.0;\n          if (this.state.playerState.offset < minOffset) {\n            playerState = {\n              state: 'playing',\n              offset: minOffset,\n            };\n          } else if (this.state.playerState.offset > maxOffset) {\n            playerState = {\n              state: 'playing',\n              offset: maxOffset,\n            };\n          }\n        }\n      }\n      return { videos, playerState };\n    });\n  }\n\n  handlePlayerStateChange(id: number, playerState: PlayerState) {\n    // TODO: Handle unexpected state change in players\n  }\n\n  computeCurrentPosition() {\n    this.setState(state => {\n      let currentPosition;\n      if (\n        state.playerState?.state === 'paused' ||\n        state.playerState?.state === 'buffering'\n      ) {\n        currentPosition = state.playerState.position;\n      } else if (state.playerState?.state === 'playing') {\n        currentPosition = new Date(\n          new Date().getTime() + state.playerState.offset * 1000.0\n        );\n      } else {\n        return {};\n      }\n      return { currentPosition };\n    });\n  }\n\n  handleSeek(position: Date) {\n    // Go to buffering state\n    this.setState({\n      playerState: {\n        state: 'buffering',\n        position,\n        videosBuffering: new Set(this.state.videos.keys()),\n      },\n    });\n  }\n\n  handlePlayerReady(id: number) {\n    const playerState = this.state.playerState;\n    if (playerState.state === 'buffering') {\n      const { position, videosBuffering } = playerState;\n      videosBuffering.delete(id);\n      if (videosBuffering.size === 0) {\n        const offset = (position.getTime() - new Date().getTime()) / 1000.0;\n        this.setState({\n          playerState: {\n            state: 'playing',\n            offset,\n          },\n        });\n      }\n    }\n  }\n\n  changeViewers(change: 1 | -1) {\n    this.setState(state => {\n      const viewers = Math.max(\n        1,\n        Math.min(MAX_VIEWERS, state.viewers + change)\n      );\n      const videos = new Map();\n      state.videos.forEach((info, id) => {\n        if (id < viewers) {\n          videos.set(id, info);\n        }\n      });\n      return {\n        viewers,\n        videos,\n      };\n    });\n    this.resized();\n  }\n\n  changePlaying(playing: boolean) {\n    if (playing && this.state.playerState.state === 'paused') {\n      this.setState({\n        playerState: {\n          state: 'playing',\n          offset:\n            (this.state.playerState.position.getTime() - new Date().getTime()) /\n            1000.0,\n        },\n      });\n    } else if (!playing && this.state.playerState.state === 'playing') {\n      this.setState({\n        playerState: {\n          state: 'paused',\n          position: new Date(\n            new Date().getTime() + this.state.playerState.offset * 1000.0\n          ),\n        },\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.accessToken) {\n      setTimeout(() => {\n        window.location.href =\n          'https://id.twitch.tv/oauth2/authorize?client_id=' +\n          TWITCH_CLIENT_ID +\n          '&redirect_uri=https://remram44.github.io/twitch-vod-sync/&response_type=token&scope=';\n      }, 2000);\n      return <p>Redirecting you to Twitch to authorize use of their API...</p>;\n    }\n\n    const viewers = [];\n    for (let i = 0; i < this.state.viewers; ++i) {\n      viewers.push(\n        <Viewer\n          id={i}\n          key={i}\n          clientId={TWITCH_CLIENT_ID}\n          accessToken={this.state.accessToken}\n          state={this.state.playerState}\n          setVideoInfo={this.setVideoInfo}\n          setPlayerReady={() => this.handlePlayerReady(i)}\n          onChange={this.handlePlayerStateChange}\n          width={this.state.width}\n        />\n      );\n    }\n\n    return (\n      <div className=\"view-container\" ref={this.containerRef}>\n        <div className=\"videos\">{viewers}</div>\n        <div className=\"timeline\">\n          <Timeline\n            currentPosition={this.state.currentPosition}\n            playing={this.state.playerState.state !== 'paused'}\n            videos={this.state.videos}\n            onSeek={this.handleSeek}\n            onViewersChange={this.changeViewers}\n            onPlayingStateChange={this.changePlaying}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { VodSyncApp } from './components/VodSyncApp/VodSyncApp';\n\nexport function App() {\n  return <VodSyncApp />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}