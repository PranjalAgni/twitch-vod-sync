{"version":3,"sources":["utils.ts","components/Timeline/Timeline.tsx","components/VideoPicker/VideoPicker.tsx","components/Viewer/Viewer.tsx","components/VodSyncApp/VodSyncApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["npad","num","size","s","length","formatDate","d","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","parseDuration","m","match","parseInt","Error","Timeline","props","videos","className","Array","from","values","startDate","Date","Math","min","map","v","getTime","endDate","max","duration","currentPosition","undefined","VideoPicker","inputRef","handleSubmit","bind","React","createRef","evt","preventDefault","this","current","value","video","console","log","onVideoPicked","error","onSubmit","type","name","ref","placeholder","PureComponent","Viewer","player","playerState","interval","state","initialState","handleVideoPicked","updateTimestamp","setState","fetch","headers","clientId","accessToken","response","status","json","videoInfo","data","created_at","videoDate","videoDuration","setVideoInfo","id","Twitch","Player","width","height","addEventListener","READY","PLAYING","PAUSE","window","setInterval","clearInterval","timestamp","getCurrentTime","isPaused","playerStateChanged","position","offset","newPlayerState","delta","abs","onChange","style","VodSyncApp","computeCurrentPosition","handlePlayerStateChange","resized","location","hash","Map","innerWidth","innerHeight","removeEventListener","info","set","setTimeout","href","App","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5164f894.chunk.js","sourcesContent":["function npad(num: number, size: number): string {\n  var s = \"\" + num;\n  while(s.length < size) {\n    s = \"0\" + s;\n  }\n  return s;\n}\n\nexport function formatDate(d: Date): string {\n  return (\n    d.getFullYear() + \"-\"\n    + npad(d.getMonth() + 1, 2) + \"-\"\n    + npad(d.getDate(), 2) + \" \"\n    + npad(d.getHours(), 2) + \":\"\n    + npad(d.getMinutes(), 2) + \":\"\n    + npad(d.getSeconds(), 2)\n  );\n}\n\nexport function parseDuration(s: string): number {\n  var m =  s.match(/(?:([0-9]+)h)?([0-9]+)m([0-9]+)s/);\n  if (!m) {\n    throw Error(\"Invalid duration\");\n  } else if(m[1]) {\n    return (\n      parseInt(m[1]) * 3600\n      + parseInt(m[2]) * 60\n      + parseInt(m[3])\n    );\n  } else {\n    return (\n      parseInt(m[2]) * 60\n      + parseInt(m[3])\n    );\n  }\n}\n","import React from 'react';\nimport { formatDate } from '../../utils';\nimport { VideoInfo } from '../../types';\n\ninterface TimelineProps {\n  videos: Map<number, VideoInfo>;\n  currentPosition?: Date;\n}\n\nexport function Timeline(props: TimelineProps) {\n  if(props.videos.size === 0) {\n    return <div className=\"timestamps\"></div>;\n  }\n  let videos = Array.from(props.videos.values());\n  let startDate = new Date(\n    Math.min(\n      ...videos.map(v => v.startDate.getTime())\n    )\n  );\n  let endDate = new Date(\n    Math.max(\n      ...videos.map(v => v.startDate.getTime() + v.duration * 1000)\n    )\n  );\n\n  return (\n    <div className=\"timestamps\">\n      <div>{formatDate(startDate)}</div>\n      <div>{props.currentPosition ? formatDate(props.currentPosition) : undefined}</div>\n      <div>{formatDate(endDate)}</div>\n    </div>\n  );\n}\n","import React from 'react';\n\ninterface VideoPickerProps {\n  onVideoPicked: (video: number) => void;\n}\n\nexport class VideoPicker extends React.PureComponent<VideoPickerProps> {\n  inputRef: React.RefObject<HTMLInputElement>;\n\n  constructor(props: VideoPickerProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.inputRef = React.createRef();\n  }\n\n  handleSubmit(evt: React.FormEvent<HTMLFormElement>) {\n    evt.preventDefault();\n    if(this.inputRef.current) {\n      let value = this.inputRef.current.value;\n      let m = value.match(/^(?:https?:\\/\\/(?:www\\.|m\\.)?twitch\\.tv\\/videos\\/)?([0-9]+)$/);\n      if(m) {\n        let video = parseInt(m[1]);\n        console.log(\"Picked video: \", value, \" \", video);\n        this.props.onVideoPicked(video);\n      } else {\n        console.log(\"Wrong URL: \", value);\n      }\n    } else {\n      console.error(\"No inputRef\");\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" name=\"video\" ref={this.inputRef} placeholder=\"Twitch video URL\" />\n        <input type=\"submit\" value=\"Watch\" />\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport { VideoInfo, PlayerState } from '../../types';\nimport { parseDuration } from '../../utils';\nimport { VideoPicker } from '../VideoPicker/VideoPicker';\n\ninterface ViewerProps {\n  id: number;\n  clientId: string;\n  accessToken: string;\n  setVideoInfo: (id: number, info: VideoInfo) => void;\n  onChange: (id: number, playerState: PlayerState) => void;\n  width: number;\n  height: number;\n}\n\ninterface ViewerState {\n  video?: number;\n  videoDate?: Date;\n  videoDuration?: number;\n  currentPosition?: Date;\n}\n\nconst MAX_DELTA = 0.8;\n\nexport class Viewer extends React.PureComponent<ViewerProps, ViewerState> {\n  player?: Twitch.Player;\n  playerState?: PlayerState;\n  interval?: number;\n\n  constructor(props: ViewerProps) {\n    super(props);\n    this.state = this.initialState();\n    this.player = undefined;\n    this.playerState = undefined;\n    this.handleVideoPicked = this.handleVideoPicked.bind(this);\n    this.updateTimestamp = this.updateTimestamp.bind(this);\n  }\n\n  initialState() {\n    return {};\n  }\n\n  async handleVideoPicked(video: number) {\n    this.setState({ video });\n\n    // Get video information from API\n    let response = await fetch(\n      \"https://api.twitch.tv/helix/videos?id=\" + video,\n      {\n        headers: {\n          \"Client-ID\": this.props.clientId,\n          \"Authorization\": \"Bearer \" + this.props.accessToken,\n        },\n      },\n    );\n    if(response.status === 200) {\n      let json = await response.json();\n      var videoInfo = json.data[0];\n      console.log(\"Got video date: \", videoInfo.created_at);\n      let videoDate = new Date(videoInfo.created_at);\n      let videoDuration = parseDuration(videoInfo.duration);\n      this.setState({\n        videoDate,\n        videoDuration,\n      });\n      this.props.setVideoInfo(\n        this.props.id,\n        {\n          startDate: videoDate,\n          duration: videoDuration,\n        },\n      );\n    }\n\n    // Create player\n    this.player = new Twitch.Player(\"player\" + this.props.id, {\n      width: \"100%\",\n      height: \"100%\",\n      video: video,\n    });\n    this.player.addEventListener(Twitch.Player.READY, this.updateTimestamp);\n    this.player.addEventListener(Twitch.Player.PLAYING, this.updateTimestamp);\n    this.player.addEventListener(Twitch.Player.PAUSE, this.updateTimestamp);\n    console.log(\"Created player\", this.player);\n    this.interval = window.setInterval(this.updateTimestamp, 1000);\n  }\n\n  componentWillUnmount() {\n    if(this.interval !== undefined) {\n      window.clearInterval(this.interval);\n      this.interval = undefined;\n    }\n  }\n\n  updateTimestamp() {\n    if(!this.state.videoDate || !this.player) {\n      return;\n    }\n    let timestamp = new Date(\n      this.state.videoDate.getTime()\n      + this.player.getCurrentTime() * 1000\n    );\n    if(this.player.isPaused()) {\n      this.playerStateChanged({\n        state: \"paused\",\n        position: timestamp,\n      });\n    } else {\n      this.playerStateChanged({\n        state: \"playing\",\n        offset: (timestamp.getTime() - new Date().getTime()) / 1000.0,\n      });\n    }\n  }\n\n  playerStateChanged(newPlayerState: PlayerState): boolean {\n    if(this.playerState !== undefined) {\n      if(newPlayerState.state === \"paused\" && this.playerState.state === \"paused\") {\n        let delta = this.playerState.position.getTime() - newPlayerState.position.getTime();\n        if(Math.abs(delta) <= MAX_DELTA) {\n          return false;\n        }\n      } else if(newPlayerState.state === \"playing\" && this.playerState.state === \"playing\") {\n        let delta = this.playerState.offset - newPlayerState.offset;\n        if(Math.abs(delta) <= MAX_DELTA) {\n          return false;\n        }\n      }\n    }\n    console.log(\"update state\");\n    this.playerState = newPlayerState;\n    this.props.onChange(this.props.id, newPlayerState);\n    return true;\n  }\n\n  render() {\n    if(this.state.video) {\n      return (\n        <div\n          id={\"player\" + this.props.id}\n          className=\"player\"\n          style={{width: this.props.width + \"px\", height: this.props.height + \"px\"}}\n        >\n        </div>\n      );\n    } else {\n      return (\n        <div\n          style={{width: this.props.width + \"px\", height: this.props.height + \"px\"}}\n        >\n          <VideoPicker onVideoPicked={this.handleVideoPicked} />\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport './VodSyncApp.css';\nimport { VideoInfo, PlayerState } from '../../types';\nimport { Timeline } from '../Timeline/Timeline';\nimport { Viewer } from '../Viewer/Viewer';\n\nconst TWITCH_CLIENT_ID = 'r69vc9claq1m3n960hrkuszot4nx54';\n\ninterface VodSyncAppProps {}\n\ninterface VodSyncAppState {\n  accessToken: string | null;\n  playerState?: PlayerState;\n  currentPosition?: Date;\n  videos: Map<number, VideoInfo>;\n  width: number;\n  height: number;\n}\n\nexport class VodSyncApp extends React.PureComponent<VodSyncAppProps, VodSyncAppState> {\n  interval?: number;\n\n  constructor(props: VodSyncAppProps) {\n    super(props);\n    this.state = this.initialState();\n    this.interval = window.setInterval(\n      this.computeCurrentPosition.bind(this),\n      1000,\n    );\n    this.setVideoInfo = this.setVideoInfo.bind(this);\n    this.handlePlayerStateChange = this.handlePlayerStateChange.bind(this);\n    this.resized = this.resized.bind(this);\n    window.addEventListener(\"resize\", this.resized);\n  }\n\n  initialState() {\n    let match = window.location.hash.match(/#access_token=([^&]+)/);\n    let accessToken = null;\n    if(match && match[1]) {\n      accessToken = match[1];\n      console.log(\"Got access token: \", accessToken);\n    }\n    return {\n      accessToken,\n      videos: new Map(),\n      width: window.innerWidth / 2 - 6,\n      height: (window.innerHeight - 20 ) - 6,\n    };\n  }\n\n  componentWillUnmount() {\n    if(this.interval !== undefined) {\n      window.clearInterval(this.interval);\n      this.interval = undefined;\n    }\n    window.removeEventListener(\"resize\", this.resized);\n  }\n\n  resized() {\n    this.setState({\n      width: window.innerWidth / 2 - 6,\n      height: (window.innerHeight - 20 ) - 6,\n    });\n  }\n\n  setVideoInfo(id: number, info: VideoInfo) {\n    console.log(\"setVideoInfo: \", id, \", \", info);\n    this.setState((state) => {\n      let videos = new Map(state.videos);\n      videos.set(id, info);\n      return { videos };\n    });\n  }\n\n  handlePlayerStateChange(id: number, playerState: PlayerState) {\n    this.setState({playerState});\n    this.computeCurrentPosition();\n  }\n\n  computeCurrentPosition() {\n    this.setState((state) => {\n      let currentPosition;\n      if(state.playerState?.state === \"paused\") {\n        currentPosition = state.playerState.position;\n      } else if(state.playerState?.state === \"playing\") {\n        currentPosition = new Date(\n          new Date().getTime() + state.playerState.offset * 1000.0\n        );\n      } else {\n        return {};\n      }\n      return {currentPosition};\n    });\n  }\n\n  render() {\n    if(!this.state.accessToken) {\n      setTimeout(\n        () => {\n          window.location.href = \"https://id.twitch.tv/oauth2/authorize?client_id=\" + TWITCH_CLIENT_ID + \"&redirect_uri=https://remram44.github.io/twitch-vod-sync/&response_type=token&scope=\";\n        },\n        2000,\n      );\n      return <p>Redirecting you to Twitch to authorize use of their API...</p>;\n    }\n\n    return (\n      <>\n        <div className=\"container\">\n          <Viewer\n            id={1}\n            clientId={TWITCH_CLIENT_ID}\n            accessToken={this.state.accessToken}\n            setVideoInfo={this.setVideoInfo}\n            onChange={this.handlePlayerStateChange}\n            width={this.state.width}\n            height={this.state.height}\n          />\n          <Viewer\n            id={2}\n            clientId={TWITCH_CLIENT_ID}\n            accessToken={this.state.accessToken}\n            setVideoInfo={this.setVideoInfo}\n            onChange={this.handlePlayerStateChange}\n            width={this.state.width}\n            height={this.state.height}\n          />\n        </div>\n        <Timeline\n          currentPosition={this.state.currentPosition}\n          videos={this.state.videos}\n        />\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { VodSyncApp } from './components/VodSyncApp/VodSyncApp';\n\nfunction App() {\n  return (\n    <VodSyncApp />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}